> 这个太多了  我总是坚持不下来，还是分开写吧，这样更有成就感

@[TOC](程序员指南02)
# 使用ACL的ZooKeeper访问控制
&nbsp;&nbsp;&nbsp;&nbsp;ACL用来控制对znode的访问。它使用权限位来允许/禁止对节点及其所适用范围的各种操作。ACL不是递归的，它仅作用于设置的地方（A节点拥有子节点B）,但是只有A节点设置了权限，那么B节点就不会受到影响。
ACL格式：`scheme:id:permission`
## permission
权限组合字符串，由cdrwa组成
+ 1 create(c)：创建子节点
+ 2 read(r)：读取节点数据及子节点列表
+ 3 write(w)：设置节点数据
+ 4 delete(d)：删除子节点（仅下一级，且只能删除自己创建的）
+ 5 admin(a)：设置节点访问控制列表权限
 &nbsp;&nbsp;&nbsp;&nbsp;设置节点数据的**write**之所以和**create**以及**delete**分离，是为了更细粒度的控制。每个人都可以查看节点，但想调用 zoo_exists() 在一个不存在的节点上, 就不会检查权限。拥有节点的ACL之前，必须先拥有admin或者read权限。
 
 ## schema
 权限机制
 + 1 world：默认方式，全部能访问
 + 2 auth：使用已添加认证的用户认证
 + 3 digest：使用“用户名：密码”方式认证
 + 4 ip：使用IP地址认证
 + 5 x509：？？不懂
 ## Zookeeper的C语言client API
 没有学过c语言诶，以后学了再回来补吧（主要还是想偷个懒，嘘）
 
 #  可插入式的ZooKeeper身份验证
 ZooKeeper在各种环境运行时，使用不同的身份验证方案，他是可插拔的身份验证框架。内建的身份验证方案也是可插入式身份验证框架。
 两个主要的身份验证操作：
 一，对客户端进行认证：在客户机连接到服务器之后立即完成。（包括验证从客户机发送或收集的关于客户机的信息；将其与连接关联起来）
 二，查找ACL中与客户机对应的条目(entries)。ACL条目是`<_idspec,permissions_>`对的格式。Idspec可以是与连接相关的身份验证信息匹配的**字符串或表达式**。以下是身份验证插件必须实现的接口。
```java
public interface AuthenticationProvider {
    //返回标识插件的字符串（由于zookeeper支持多种身份验证方法，所以以scheme:作为前缀；借此确定该方案应用于哪些id？）
    String getScheme();
    //客户机发送与连接相关联的身份验证信息时调用
    //客户端制定信息对应的方案。zk服务端将信息发送给，发送的getScheme与方案匹配的客户端的可验证插件。handleAuthentication的实现者在确定信息发送错误时会返回错误。它也可以用cnxn.getAuthInfo().add(new Id(getScheme(), data))将连接和信息关联起来。
    KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte authData[]);
    //身份验证插件涉及ACL的设置和使用。当为znode设置ACL时，zk服务器将把条目的id部分传递给isValid(String id)方法。用来验证id是否有效。
    boolean isValid(String id);
    //检查ACL时调用,将客户端的身份验证信息与相关的ACL条目进行匹配。
    boolean matches(String id, String aclExpr);
    //如果ACL包含了“auth”，则使用isAuthenticated查看是否应该将与连接相关的这个方案的身份验证信息添加到ACL。（如指定了auth，客户端的ip就不需要作为id添加到ACL了）
    boolean isAuthenticated();
}
```
## 身份验证插件与添加方法
有两个内置的身份验证插件：**ip**和**digest**。额外的可以使用系统属性添加（等号前的要是唯一的，不能出现两个一样的）
添加方法：
一，使用`Dzookeeeper.authProvider.X = com.f.MyAuth` 设置这些属性
二，在服务器的配置文件中添加如下条目

```c
authProvider.1=com.f.MyAuth
authProvider.2=com.f.MyAuth2
```
# 一致性保证
Zk是一种高性能、可伸缩的服务，读写操作都比较快，读操作较快。这是因为读操作可以读旧数据（缓存吗？）。
不，这是由于Zk的一致性保证：
+ 1 顺序一致性：客户端的更新按顺序发送（只可以看到最近的一次更新）
+ 2 原子性：每个更新要么要成功，要么失败，不会出现一半。我记得数据库也有这种特性诶。
+ 3 单一系统映像：客户端无论连接到哪台服务器，都会看到同样的系统视图
> 感觉有数据库那味了，他是不是模仿数据库写的呀？
+ 4 持久性：更新一旦成功，就会一直保持下去。这个保证有两个推论：
（1）客户端获得成功的返回码，应用更新。但如果出现通信错误、超时等，客户端不知道是否更新。我们采取的措施只能保障存在于成功的返回代码中？？
（2）服务器故障恢复时，客户端的更新不会回滚。
+ 5 及时性：客户端视图在一定时间范围内（几十秒左右）是最新的。
Note：zk不能保证每个客户端拥有相同zk数据视图。所以更新数据前可以先调用sync()等同步操作。
